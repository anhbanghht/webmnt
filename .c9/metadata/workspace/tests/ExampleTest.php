{"filter":false,"title":"ExampleTest.php","tooltip":"/tests/ExampleTest.php","ace":{"folds":[],"scrolltop":0,"scrollleft":349,"selection":{"start":{"row":18,"column":69},"end":{"row":18,"column":100},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"hash":"69808c5dca8ce4e4601132296b87e017e8652412","undoManager":{"mark":14,"position":14,"stack":[[{"start":{"row":0,"column":0},"end":{"row":19,"column":0},"action":"remove","lines":["<?php","","use Illuminate\\Foundation\\Testing\\WithoutMiddleware;","use Illuminate\\Foundation\\Testing\\DatabaseMigrations;","use Illuminate\\Foundation\\Testing\\DatabaseTransactions;","","class ExampleTest extends TestCase","{","    /**","     * A basic functional test example.","     *","     * @return void","     */","    public function testBasicExample()","    {","        $this->visit('/')","             ->see('Laravel 5');","    }","}",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":105,"column":0},"action":"insert","lines":["<?php","","use Illuminate\\Foundation\\Testing\\WithoutMiddleware;","use Illuminate\\Foundation\\Testing\\DatabaseMigrations;","use Illuminate\\Foundation\\Testing\\DatabaseTransactions;","use GuzzleHttp\\Client;","use Illuminate\\Support\\Facades\\Artisan;","","require('vendor/autoload.php');","","class ExampleTest ","{","    use DatabaseMigrations;","","        public function setUp()","    {","        ","        parent::setUp();","        $this->client = new GuzzleHttp\\Client(['base_uri' => 'http://localhost:9000/api/v1/', 'auth' => ['first@gmail.com', 'secret']]);","        //Artisan::call('migrate');","        //Artisan::call('db:seed');","        //$this->call(\"DatabaseSeeder\");","","            }","    ","/*    //overloading get post put patch and delete methods","    public function __call($method, $args)","    {","        if (in_array($method, ['get', 'post', 'put', 'patch', 'delete']))","        {","            return $this->call($method, $args[0]);","        }","     ","        throw new BadMethodCallException;","    }*/","","","","","","    /**","     * A basic functional test example.","     *","     * @return void","     */","","    ","","    public function test_database()","    {","        $users = App\\User::all();","        foreach ($users as $user) {","            echo($user->id);","        }","        //Auth::loginUsingId(2);","        $response = $this->client->get('calendars');","","        //dd($response->getStatusCode());","        //dd($this->client);","        ","        //$this->assertEquals(200, $response->getStatusCode());","        //  $data = json_decode($response->getBody(true), true);","        ","        //dd($this->client);","        ","        //$response = $this->client->get('calendars');","        //dd($response);","","        ","","        //200 response","        //$response = $this->client->get($uri);","        //$this->assertEquals(200, $response->getStatusCode());","        //$data = json_decode($response->getBody(true), true);","","        //$this->seeInDatabase('calendar', ['id' => '2']);","","        /*factory(App\\Calendar::class, 20)->create()","                                        ->each(function($calendar) {","                                            $calendar->relatedItems()->save(factory('App\\User')->make());","                                        });*/","/*        $users = factory(App\\User::class, 3)->create()","                                            ->each(function($u){","                                                $u->calendars()->save(factory('App\\Calendar')->make());","                                            });*/","        /*$calendars = factory(App\\Calendar::class)->create()","                                                 ->each(function($u){","                                                    $u->user()->save(factory('App\\User')->make());","                                                 });*/","","        //$user = factory(App\\User::class)->create();","        //$calendar = factory(App\\Calendar::class)->make();","        ","        //$calendar->create();","","        //$calendar->user_id = $user->id;","        //dd($calendar->summary);","        ","        //$calendar->create();","        ","        //$events = factory(App\\Event::class, 2)->make();","        //dd($calendars->toArray());","","    }","}",""]}],[{"start":{"row":18,"column":69},"end":{"row":18,"column":90},"action":"remove","lines":["localhost:9000/api/v1"],"id":4},{"start":{"row":18,"column":69},"end":{"row":18,"column":100},"action":"insert","lines":["webmmt-thumayduong-1.c9users.io"]}],[{"start":{"row":18,"column":116},"end":{"row":18,"column":121},"action":"remove","lines":["first"],"id":5},{"start":{"row":18,"column":116},"end":{"row":18,"column":117},"action":"insert","lines":["a"]}],[{"start":{"row":18,"column":117},"end":{"row":18,"column":118},"action":"insert","lines":["d"],"id":6}],[{"start":{"row":18,"column":118},"end":{"row":18,"column":119},"action":"insert","lines":["m"],"id":7}],[{"start":{"row":18,"column":119},"end":{"row":18,"column":120},"action":"insert","lines":["i"],"id":8}],[{"start":{"row":18,"column":120},"end":{"row":18,"column":121},"action":"insert","lines":["n"],"id":9}],[{"start":{"row":18,"column":135},"end":{"row":18,"column":141},"action":"remove","lines":["secret"],"id":10},{"start":{"row":18,"column":135},"end":{"row":18,"column":136},"action":"insert","lines":["d"]}],[{"start":{"row":18,"column":136},"end":{"row":18,"column":137},"action":"insert","lines":["u"],"id":11}],[{"start":{"row":18,"column":137},"end":{"row":18,"column":138},"action":"insert","lines":["o"],"id":12}],[{"start":{"row":18,"column":138},"end":{"row":18,"column":139},"action":"insert","lines":["n"],"id":13}],[{"start":{"row":18,"column":139},"end":{"row":18,"column":140},"action":"insert","lines":["g"],"id":14}],[{"start":{"row":18,"column":140},"end":{"row":18,"column":141},"action":"insert","lines":["1"],"id":15}],[{"start":{"row":18,"column":141},"end":{"row":18,"column":142},"action":"insert","lines":["2"],"id":16}],[{"start":{"row":18,"column":142},"end":{"row":18,"column":143},"action":"insert","lines":["3"],"id":17}]]},"timestamp":1462424696000}